/**
 * @author Patrick Zhu, Tim Lauv, Zahra Ghead
 * @created 2017.02.06
 * @updated 2017.02.20 (Tim Lauv +generate and 4 funcs)
 * @updated 2017.03.15 (Patrick Zhu +view export)
 * @updated 2017.06.01 (Zahra Ghead +less)
 */
var _ = require('underscore'),
	path = require('path'),
	fs = require('fs-extra'),
	less = require('less');

//prettifier, https://www.npmjs.com/package/js-prettify
var beautify_js = require('js-beautify').js, // also available under "js" export 
	beautify_css = require('js-beautify').css,
	beautify_html = require('js-beautify').html;


module.exports = function(server){

	var profile = server.get('profile');
	var router = server.mount(this);
	server.secure(router);

	router.get('/getViewList', function(req, res){
		var views = getViewList();
		return res.status(200).json(views);
	});

	router.post('/less', function(req, res) {
	    var root = path.join(__dirname, '..', '..', '..', 'implementation', 'themes', req.body.theme);
	    var lessFile = '@import (reference) "main.less";' + req.body.less;
	    
	    less.render(lessFile, {
	            paths: [path.join(root, 'less'), path.join(root), path.join(root, '..'), path.join(root, '..', '..', 'bower_components')],
	            plugins: [require('less-plugin-glob')]
	        },
	        function(error, output) {
	            //if error, print error and return
	            if (error) {
	                console.log('LESS compile error\n', error);
	                return;
	            }
	            //console.log(output.css);
	            return res.status(200).json({ msg: output.css });
	        });
	});

	router.post('/generate', function(req, res){
		
		//grab the points and lines
		var meta = req.body;
		//cleanse them (remove the edge lines)
		meta.hlines = _.filter(meta.hlines, function(l){
			return Math.ceil(l.y) !== 100 && Math.floor(l.y) !== 0;
		});
		meta.vlines = _.filter(meta.vlines, function(l){
			return Math.ceil(l.x) !== 100 && Math.floor(l.x) !== 0;
		});

		//generate layout configure ($.flexLayout)
		var counter = {count: 0}, layout = constructLayout({
			top: 0,
			bottom: 100,
			left: 0,
			right: 100,
		}, meta.hlines, meta.vlines, counter) || [];

		return res.status(200).json({
			meta: meta,
			layout: {
				split: layout.layout, //Just put it like this to confuse you! Muhaha...
				dir: layout.dir,
			},
			'region-count': counter.count,
		});
	});

	router.post('/viewexport', function(req, res){
		var views = getViewList();
		//get html and name
		var template = req.body.template || ' ',
			name = req.body.name,
			data = req.body.data,
			layout = req.body.layout,
			svg = req.body.svg,
			editors = req.body.editors,
			attributes = req.body.attributes,
			overwrite = req.body.overwrite,
			remoteFlag = req.body.remoteFlag,
			less = req.body.less,
			themeName = req.body.themeName;
		//make a copy of original name
		var originalName = name;
		
		//make sure to capitalize first letters after "." of name to meet Stage.js view naming scheme
		name = (_.map(name.split('.'), function(str){ return str.charAt(0).toUpperCase() + str.slice(1); })).join('.');

		//check if the view name is already existed
		if(!_.contains(views, 'User.' + name) || overwrite){
			//two basic paths
			var baseJsSrc = '../../implementation/js/ide/view/user/',
				baseHtmlSrc = '../../implementation/static/template/view/user/',
				baseLessSrc = '../../implementation/themes/' + themeName + '/less/specifics/exported/';

			//relative path and view name
			var rpath = name.toLowerCase().split('.');
			rpath.pop();
			rpath = rpath.join('/');
				
			var fileName = name.split('.').pop().replace(/([A-Z])/g, "-$1").replace(/^-/, '').toLowerCase(),
				folders = name.toLowerCase().split('.');

			//delete last element in folders which is the file name
			folders.pop();

			var tempHtml = baseHtmlSrc,
				tempJs = baseJsSrc,
				currentStr;
			//create directories if necessary
			while(folders.length){
				currentStr = folders.shift();
				tempHtml = path.join(tempHtml, currentStr);
				tempJs = path.join(tempJs, currentStr);

				if (!fs.existsSync(tempHtml)){
				    fs.mkdirSync(tempHtml);
				}

				if (!fs.existsSync(tempJs)){
				    fs.mkdirSync(tempJs);
				}
			}

			//beautify html
			template = beautify_html('<!-- Generated by Stage.js IDE on ' + new Date() + '-->' + template);
			//write html
			fs.writeFileSync(path.join(tempHtml, fileName + '.html'), template);

			//
			var jsStr = '/* Generated by Stage.js IDE on ' + new Date() + '*/' + '(function(app){ app.view("User.' + name + '",{ ' +
						//check layout or template
						(layout ? ('layout: ' + JSON.stringify(layout) + ',') : ('template: "@view/user/' + path.join(rpath, fileName + '.html') + '",'))+ 
						'data: ' + (remoteFlag ? ('"' + data + '"') : (data || "{}")) + ',' +
						'svg: ' + JSON.stringify(svg || {}) + ',' +
						'editors: ' + JSON.stringify(editors || {}) + ',' + 
						'attributes: ' + JSON.stringify(attributes || {}) + ',' + 
						'}); })(Application);';
			jsStr = beautify_js(jsStr);
			fs.writeFileSync(path.join(tempJs, fileName + '.js'), jsStr);

			//export less into ../../implementation/themes/' + themeName + '/less/specifics/exported/
			//first test whether base path exists or not, if not make one
			if (!fs.existsSync(baseLessSrc)){
			    fs.mkdirSync(baseLessSrc);
			}

			var lessPath = path.join(baseLessSrc, originalName + '.less');
			//no need to check whether file exists, rewrite it anyway
			//scope the less with .regional-user-<viewname>
			//beautify_css works okay with less file
			fs.writeFileSync(lessPath, beautify_css('.regional-user-' + originalName + '{' + less + '}'));

			return res.status(200).json({'msg': 'Saved'});
		}else{
			//return an error say that view name already eixsted
			return res.status(400).json({'msg': 'View name already existed.'});
		}
	});

};

function constructLayout(region, hlines, vlines, counter){

	//find all through lines (assuming ascending order in line lvls)
	var hThroughLines = findThroughLines(region.left, region.right, hlines, 'x'),
	vThroughLines = findThroughLines(region.top, region.bottom, vlines, 'y');

	//debug
	//console.log('region:', region, 'hT:', hThroughLines, 'vT:', vThroughLines);

	var layout = [], dir;
	if(hThroughLines.length > 0){
		var currentTop = region.top;
		hThroughLines.push(region.bottom);
		_.each(hThroughLines, function(yLevel){
			var subRegionLayout = constructLayout({
				top: currentTop,
				bottom: yLevel,
				left: region.left,
				right: region.right,
			}, _.filter(hlines, function(l){
				return l.y > currentTop && l.y < yLevel;
			}), _.filter(vlines, function(l){
				return l.y1 >= currentTop && l.y2 <= yLevel;
			}), counter);

			if(subRegionLayout)
				layout.push([trimNumber(yLevel - currentTop) + ':#' + _.uniqueId('flex-region-'), subRegionLayout.layout]);
			else
				layout.push(trimNumber(yLevel - currentTop) + ':id="' + _.uniqueId('flex-region-') + '" region="gen-h-' + counter.count + '"');

			currentTop = yLevel;
		});
		dir = 'h';
	}else if(vThroughLines.length > 0){
		var currentLeft = region.left;
		vThroughLines.push(region.right);
		_.each(vThroughLines, function(xLevel){
			var subRegionLayout = constructLayout({
				top: region.top,
				bottom: region.bottom,
				left: currentLeft,
				right: xLevel,
			}, _.filter(hlines, function(l){
				return l.x1 >= currentLeft && l.x2 <= xLevel;
			}), _.filter(vlines, function(l){
				return l.x > currentLeft && l.x < xLevel;
			}), counter);

			if(subRegionLayout)
				layout.push([trimNumber(xLevel - currentLeft) + ':#' + _.uniqueId('flex-region-'), subRegionLayout.layout]);
			else
				layout.push(trimNumber(xLevel - currentLeft) + ':id="' + _.uniqueId('flex-region-') + '" region="gen-v-' + counter.count + '"');

			currentLeft = xLevel;
		});
		dir = 'v';
	}else {
		//no through lines means region not sub-divided.
		counter.count++;
		return;
	}
	return {layout: layout, dir: dir};
}

function inverseD(xory){
	switch(xory){
		case 'x':
			return 'y';
		case 'y':
			return 'x';
		default:
			break;
	}
}

function findThroughLines(start, stop, lines, direction){
	var throughLines = [];
	_.each(lines, function(l){
		if(l[direction + '1'] === start && followTheLine(l[direction + '2'], stop, l[inverseD(direction)], lines, direction))
			throughLines.push(l[inverseD(direction)]);
	});
	return throughLines;
}

function followTheLine(next, until, level, lines, direction){
	if(next === until || Math.ceil(next) === until)
		return true;

	for(var index in lines){
		var l = lines[index];
		if(l[direction + '1'] === next && l[inverseD(direction)] === level)
			return followTheLine(l[direction + '2'], until, level, lines, direction);
	}
	return false;
}

function trimNumber(number){
	return parseFloat(number.toFixed(2));
}

//function to get all the view listings
function getViewList(){
	//first get current stored view names, stored in views array
	var views = [],
		baseSrc = '../../implementation/js/ide/view/';
	//
	var paths = fs.walkSync(path.join(baseSrc, 'user')); //walkSync relies on fs-extra 1.x.x. 2.x.x has moved this function to a separate package.
	//augment paths to view names
	_.each(paths, function(p, index){
		//get paths in pieces
		var temp = p.replace(baseSrc, '').split('/');
		//get rid of last .js extension
		temp[temp.length - 1] = temp[temp.length - 1].replace(/.js$/, '');
		//capitalize first character
		_.each(temp, function(str, index){
			temp[index] = str.charAt(0).toUpperCase() + str.slice(1);
		});
		//combine them into view name
		views.push(temp.join('.'));
	});
	return views;
}